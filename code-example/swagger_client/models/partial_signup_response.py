# coding: utf-8

"""
    Vipps signup API

    Vipps Signup API enables a partner to initiate Vipps onboarding process on behalf of a merchant. The merchant needs to complete Vipps signup form to sign the merchant agreement with Vipps. After the signup form has been processed, Vipps will send the API keys to the defined callback endpoint. In order to complete the integration there is a need to: 1. Initiate the Signup to the Initiate endpoint 2. Accept the callback sent to the callback endpoint 3. Return a 202 response to acknowledge that the callback has been accepted.    # noqa: E501

    OpenAPI spec version: 1.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class PartialSignupResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'signup_id': 'str',
        'vipps_url': 'str'
    }

    attribute_map = {
        'signup_id': 'signup-id',
        'vipps_url': 'vippsURL'
    }

    def __init__(self, signup_id=None, vipps_url=None):  # noqa: E501
        """PartialSignupResponse - a model defined in Swagger"""  # noqa: E501
        self._signup_id = None
        self._vipps_url = None
        self.discriminator = None
        self.signup_id = signup_id
        self.vipps_url = vipps_url

    @property
    def signup_id(self):
        """Gets the signup_id of this PartialSignupResponse.  # noqa: E501

        Unique ID per signup request  # noqa: E501

        :return: The signup_id of this PartialSignupResponse.  # noqa: E501
        :rtype: str
        """
        return self._signup_id

    @signup_id.setter
    def signup_id(self, signup_id):
        """Sets the signup_id of this PartialSignupResponse.

        Unique ID per signup request  # noqa: E501

        :param signup_id: The signup_id of this PartialSignupResponse.  # noqa: E501
        :type: str
        """
        if signup_id is None:
            raise ValueError("Invalid value for `signup_id`, must not be `None`")  # noqa: E501

        self._signup_id = signup_id

    @property
    def vipps_url(self):
        """Gets the vipps_url of this PartialSignupResponse.  # noqa: E501

        Redirect URL to complete the sign-up  # noqa: E501

        :return: The vipps_url of this PartialSignupResponse.  # noqa: E501
        :rtype: str
        """
        return self._vipps_url

    @vipps_url.setter
    def vipps_url(self, vipps_url):
        """Sets the vipps_url of this PartialSignupResponse.

        Redirect URL to complete the sign-up  # noqa: E501

        :param vipps_url: The vipps_url of this PartialSignupResponse.  # noqa: E501
        :type: str
        """
        if vipps_url is None:
            raise ValueError("Invalid value for `vipps_url`, must not be `None`")  # noqa: E501

        self._vipps_url = vipps_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PartialSignupResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PartialSignupResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
