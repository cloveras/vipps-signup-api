# coding: utf-8

"""
    Vipps signup API

    Vipps Signup API enables a partner to initiate Vipps onboarding process on behalf of a merchant. The merchant needs to complete Vipps signup form to sign the merchant agreement with Vipps. After the signup form has been processed, Vipps will send the API keys to the defined callback endpoint. In order to complete the integration there is a need to: 1. Initiate the Signup to the Initiate endpoint 2. Accept the callback sent to the callback endpoint 3. Return a 202 response to acknowledge that the callback has been accepted.    # noqa: E501

    OpenAPI spec version: 1.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CallbackTriggerResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'signup_id': 'str',
        'orgnumber': 'str',
        'merchant_name': 'str',
        'created_time': 'str',
        'merchant_serial_number': 'str',
        'client_id': 'str',
        'client_secret': 'str',
        'subscription_keys': 'SubscriptionKeys'
    }

    attribute_map = {
        'signup_id': 'signup-id',
        'orgnumber': 'orgnumber',
        'merchant_name': 'merchant-name',
        'created_time': 'createdTime',
        'merchant_serial_number': 'merchantSerialNumber',
        'client_id': 'client_Id',
        'client_secret': 'client_Secret',
        'subscription_keys': 'subscriptionKeys'
    }

    def __init__(self, signup_id=None, orgnumber=None, merchant_name=None, created_time=None, merchant_serial_number=None, client_id=None, client_secret=None, subscription_keys=None):  # noqa: E501
        """CallbackTriggerResponse - a model defined in Swagger"""  # noqa: E501
        self._signup_id = None
        self._orgnumber = None
        self._merchant_name = None
        self._created_time = None
        self._merchant_serial_number = None
        self._client_id = None
        self._client_secret = None
        self._subscription_keys = None
        self.discriminator = None
        self.signup_id = signup_id
        if orgnumber is not None:
            self.orgnumber = orgnumber
        if merchant_name is not None:
            self.merchant_name = merchant_name
        if created_time is not None:
            self.created_time = created_time
        if merchant_serial_number is not None:
            self.merchant_serial_number = merchant_serial_number
        if client_id is not None:
            self.client_id = client_id
        if client_secret is not None:
            self.client_secret = client_secret
        if subscription_keys is not None:
            self.subscription_keys = subscription_keys

    @property
    def signup_id(self):
        """Gets the signup_id of this CallbackTriggerResponse.  # noqa: E501

        Unique ID per signup request  # noqa: E501

        :return: The signup_id of this CallbackTriggerResponse.  # noqa: E501
        :rtype: str
        """
        return self._signup_id

    @signup_id.setter
    def signup_id(self, signup_id):
        """Sets the signup_id of this CallbackTriggerResponse.

        Unique ID per signup request  # noqa: E501

        :param signup_id: The signup_id of this CallbackTriggerResponse.  # noqa: E501
        :type: str
        """
        if signup_id is None:
            raise ValueError("Invalid value for `signup_id`, must not be `None`")  # noqa: E501

        self._signup_id = signup_id

    @property
    def orgnumber(self):
        """Gets the orgnumber of this CallbackTriggerResponse.  # noqa: E501

        Norwegian Organization Number  # noqa: E501

        :return: The orgnumber of this CallbackTriggerResponse.  # noqa: E501
        :rtype: str
        """
        return self._orgnumber

    @orgnumber.setter
    def orgnumber(self, orgnumber):
        """Sets the orgnumber of this CallbackTriggerResponse.

        Norwegian Organization Number  # noqa: E501

        :param orgnumber: The orgnumber of this CallbackTriggerResponse.  # noqa: E501
        :type: str
        """

        self._orgnumber = orgnumber

    @property
    def merchant_name(self):
        """Gets the merchant_name of this CallbackTriggerResponse.  # noqa: E501

        Merchant Name  # noqa: E501

        :return: The merchant_name of this CallbackTriggerResponse.  # noqa: E501
        :rtype: str
        """
        return self._merchant_name

    @merchant_name.setter
    def merchant_name(self, merchant_name):
        """Sets the merchant_name of this CallbackTriggerResponse.

        Merchant Name  # noqa: E501

        :param merchant_name: The merchant_name of this CallbackTriggerResponse.  # noqa: E501
        :type: str
        """

        self._merchant_name = merchant_name

    @property
    def created_time(self):
        """Gets the created_time of this CallbackTriggerResponse.  # noqa: E501

        createdTime  # noqa: E501

        :return: The created_time of this CallbackTriggerResponse.  # noqa: E501
        :rtype: str
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this CallbackTriggerResponse.

        createdTime  # noqa: E501

        :param created_time: The created_time of this CallbackTriggerResponse.  # noqa: E501
        :type: str
        """

        self._created_time = created_time

    @property
    def merchant_serial_number(self):
        """Gets the merchant_serial_number of this CallbackTriggerResponse.  # noqa: E501

        merchantSerialNumber  # noqa: E501

        :return: The merchant_serial_number of this CallbackTriggerResponse.  # noqa: E501
        :rtype: str
        """
        return self._merchant_serial_number

    @merchant_serial_number.setter
    def merchant_serial_number(self, merchant_serial_number):
        """Sets the merchant_serial_number of this CallbackTriggerResponse.

        merchantSerialNumber  # noqa: E501

        :param merchant_serial_number: The merchant_serial_number of this CallbackTriggerResponse.  # noqa: E501
        :type: str
        """

        self._merchant_serial_number = merchant_serial_number

    @property
    def client_id(self):
        """Gets the client_id of this CallbackTriggerResponse.  # noqa: E501

        clientId  # noqa: E501

        :return: The client_id of this CallbackTriggerResponse.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this CallbackTriggerResponse.

        clientId  # noqa: E501

        :param client_id: The client_id of this CallbackTriggerResponse.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def client_secret(self):
        """Gets the client_secret of this CallbackTriggerResponse.  # noqa: E501

        clientSecret  # noqa: E501

        :return: The client_secret of this CallbackTriggerResponse.  # noqa: E501
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this CallbackTriggerResponse.

        clientSecret  # noqa: E501

        :param client_secret: The client_secret of this CallbackTriggerResponse.  # noqa: E501
        :type: str
        """

        self._client_secret = client_secret

    @property
    def subscription_keys(self):
        """Gets the subscription_keys of this CallbackTriggerResponse.  # noqa: E501


        :return: The subscription_keys of this CallbackTriggerResponse.  # noqa: E501
        :rtype: SubscriptionKeys
        """
        return self._subscription_keys

    @subscription_keys.setter
    def subscription_keys(self, subscription_keys):
        """Sets the subscription_keys of this CallbackTriggerResponse.


        :param subscription_keys: The subscription_keys of this CallbackTriggerResponse.  # noqa: E501
        :type: SubscriptionKeys
        """

        self._subscription_keys = subscription_keys

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CallbackTriggerResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CallbackTriggerResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
