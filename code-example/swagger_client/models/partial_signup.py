# coding: utf-8

"""
    Vipps signup API

    Vipps Signup API enables a partner to initiate Vipps onboarding process on behalf of a merchant. The merchant needs to complete Vipps signup form to sign the merchant agreement with Vipps. After the signup form has been processed, Vipps will send the API keys to the defined callback endpoint. In order to complete the integration there is a need to: 1. Initiate the Signup to the Initiate endpoint 2. Accept the callback sent to the callback endpoint 3. Return a 202 response to acknowledge that the callback has been accepted.    # noqa: E501

    OpenAPI spec version: 1.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class PartialSignup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'orgnumber': 'str',
        'partner_id': 'str',
        'subscription_package_id': 'str',
        'signup_callback_url': 'str',
        'signup_callback_token': 'str',
        'merchant_website_url': 'str',
        'form_type': 'str'
    }

    attribute_map = {
        'orgnumber': 'orgnumber',
        'partner_id': 'partnerId',
        'subscription_package_id': 'subscriptionPackageId',
        'signup_callback_url': 'signupCallbackUrl',
        'signup_callback_token': 'signupCallbackToken',
        'merchant_website_url': 'merchantWebsiteUrl',
        'form_type': 'form-type'
    }

    def __init__(self, orgnumber=None, partner_id=None, subscription_package_id=None, signup_callback_url=None, signup_callback_token=None, merchant_website_url=None, form_type=None):  # noqa: E501
        """PartialSignup - a model defined in Swagger"""  # noqa: E501
        self._orgnumber = None
        self._partner_id = None
        self._subscription_package_id = None
        self._signup_callback_url = None
        self._signup_callback_token = None
        self._merchant_website_url = None
        self._form_type = None
        self.discriminator = None
        self.orgnumber = orgnumber
        self.partner_id = partner_id
        self.subscription_package_id = subscription_package_id
        self.signup_callback_url = signup_callback_url
        if signup_callback_token is not None:
            self.signup_callback_token = signup_callback_token
        self.merchant_website_url = merchant_website_url
        self.form_type = form_type

    @property
    def orgnumber(self):
        """Gets the orgnumber of this PartialSignup.  # noqa: E501

        Norwegian Organization Number  # noqa: E501

        :return: The orgnumber of this PartialSignup.  # noqa: E501
        :rtype: str
        """
        return self._orgnumber

    @orgnumber.setter
    def orgnumber(self, orgnumber):
        """Sets the orgnumber of this PartialSignup.

        Norwegian Organization Number  # noqa: E501

        :param orgnumber: The orgnumber of this PartialSignup.  # noqa: E501
        :type: str
        """
        if orgnumber is None:
            raise ValueError("Invalid value for `orgnumber`, must not be `None`")  # noqa: E501

        self._orgnumber = orgnumber

    @property
    def partner_id(self):
        """Gets the partner_id of this PartialSignup.  # noqa: E501

        PartnerID to identify the partner  # noqa: E501

        :return: The partner_id of this PartialSignup.  # noqa: E501
        :rtype: str
        """
        return self._partner_id

    @partner_id.setter
    def partner_id(self, partner_id):
        """Sets the partner_id of this PartialSignup.

        PartnerID to identify the partner  # noqa: E501

        :param partner_id: The partner_id of this PartialSignup.  # noqa: E501
        :type: str
        """
        if partner_id is None:
            raise ValueError("Invalid value for `partner_id`, must not be `None`")  # noqa: E501

        self._partner_id = partner_id

    @property
    def subscription_package_id(self):
        """Gets the subscription_package_id of this PartialSignup.  # noqa: E501

        The price package that will be used for this merchant  # noqa: E501

        :return: The subscription_package_id of this PartialSignup.  # noqa: E501
        :rtype: str
        """
        return self._subscription_package_id

    @subscription_package_id.setter
    def subscription_package_id(self, subscription_package_id):
        """Sets the subscription_package_id of this PartialSignup.

        The price package that will be used for this merchant  # noqa: E501

        :param subscription_package_id: The subscription_package_id of this PartialSignup.  # noqa: E501
        :type: str
        """
        if subscription_package_id is None:
            raise ValueError("Invalid value for `subscription_package_id`, must not be `None`")  # noqa: E501

        self._subscription_package_id = subscription_package_id

    @property
    def signup_callback_url(self):
        """Gets the signup_callback_url of this PartialSignup.  # noqa: E501

        URL that the callback will be sent to  # noqa: E501

        :return: The signup_callback_url of this PartialSignup.  # noqa: E501
        :rtype: str
        """
        return self._signup_callback_url

    @signup_callback_url.setter
    def signup_callback_url(self, signup_callback_url):
        """Sets the signup_callback_url of this PartialSignup.

        URL that the callback will be sent to  # noqa: E501

        :param signup_callback_url: The signup_callback_url of this PartialSignup.  # noqa: E501
        :type: str
        """
        if signup_callback_url is None:
            raise ValueError("Invalid value for `signup_callback_url`, must not be `None`")  # noqa: E501

        self._signup_callback_url = signup_callback_url

    @property
    def signup_callback_token(self):
        """Gets the signup_callback_token of this PartialSignup.  # noqa: E501

        Token to authenticate the callback to `signupCallbackUrl`  # noqa: E501

        :return: The signup_callback_token of this PartialSignup.  # noqa: E501
        :rtype: str
        """
        return self._signup_callback_token

    @signup_callback_token.setter
    def signup_callback_token(self, signup_callback_token):
        """Sets the signup_callback_token of this PartialSignup.

        Token to authenticate the callback to `signupCallbackUrl`  # noqa: E501

        :param signup_callback_token: The signup_callback_token of this PartialSignup.  # noqa: E501
        :type: str
        """

        self._signup_callback_token = signup_callback_token

    @property
    def merchant_website_url(self):
        """Gets the merchant_website_url of this PartialSignup.  # noqa: E501

        Merchant website URL  # noqa: E501

        :return: The merchant_website_url of this PartialSignup.  # noqa: E501
        :rtype: str
        """
        return self._merchant_website_url

    @merchant_website_url.setter
    def merchant_website_url(self, merchant_website_url):
        """Sets the merchant_website_url of this PartialSignup.

        Merchant website URL  # noqa: E501

        :param merchant_website_url: The merchant_website_url of this PartialSignup.  # noqa: E501
        :type: str
        """
        if merchant_website_url is None:
            raise ValueError("Invalid value for `merchant_website_url`, must not be `None`")  # noqa: E501

        self._merchant_website_url = merchant_website_url

    @property
    def form_type(self):
        """Gets the form_type of this PartialSignup.  # noqa: E501

        The type of the form  # noqa: E501

        :return: The form_type of this PartialSignup.  # noqa: E501
        :rtype: str
        """
        return self._form_type

    @form_type.setter
    def form_type(self, form_type):
        """Sets the form_type of this PartialSignup.

        The type of the form  # noqa: E501

        :param form_type: The form_type of this PartialSignup.  # noqa: E501
        :type: str
        """
        if form_type is None:
            raise ValueError("Invalid value for `form_type`, must not be `None`")  # noqa: E501

        self._form_type = form_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PartialSignup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PartialSignup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
